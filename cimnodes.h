//This file is automatically generated by generator.lua from https://github.com/cimgui/imnodes
//based on imnodes.h file version XXX from https://github.com/Nelarius/imnodes
#ifndef CIMNODES_INCLUDED
#define CIMNODES_INCLUDED
#include <stdio.h>
#include <stdint.h>
#if defined _WIN32 || defined __CYGWIN__
    #ifdef CIMGUI_NO_EXPORT
        #define API
    #else
        #define API __declspec(dllexport)
    #endif
    #ifndef __GNUC__
    #define snprintf sprintf_s
    #endif
#else
    #ifdef __GNUC__
        #define API  __attribute__((__visibility__("default")))
    #else
        #define API
    #endif
#endif

#if defined __cplusplus
    #define EXTERN extern "C"
#else
    #include <stdarg.h>
    #include <stdbool.h>
    #define EXTERN extern
#endif

#define CIMGUI_API EXTERN API
#define CONST const


#ifdef _MSC_VER
typedef unsigned __int64 ImU64;
#else
//typedef unsigned long long ImU64;
#endif


#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef struct EditorContext EditorContext;
typedef struct Style Style;
typedef struct LinkDetachWithModifierClick LinkDetachWithModifierClick;
typedef struct EmulateThreeButtonMouse EmulateThreeButtonMouse;
typedef struct IO IO;
typedef struct ImVec2 ImVec2;

struct ImVec2;
struct EditorContext;
typedef enum {
    ColorStyle_NodeBackground = 0,
    ColorStyle_NodeBackgroundHovered,
    ColorStyle_NodeBackgroundSelected,
    ColorStyle_NodeOutline,
    ColorStyle_TitleBar,
    ColorStyle_TitleBarHovered,
    ColorStyle_TitleBarSelected,
    ColorStyle_Link,
    ColorStyle_LinkHovered,
    ColorStyle_LinkSelected,
    ColorStyle_Pin,
    ColorStyle_PinHovered,
    ColorStyle_BoxSelector,
    ColorStyle_BoxSelectorOutline,
    ColorStyle_GridBackground,
    ColorStyle_GridLine,
    ColorStyle_Count
}ColorStyle;
typedef enum {
    StyleVar_GridSpacing = 0,
    StyleVar_NodeCornerRounding,
    StyleVar_NodePaddingHorizontal,
    StyleVar_NodePaddingVertical
}StyleVar;
typedef enum {
    StyleFlags_None = 0,
    StyleFlags_NodeOutline = 1 << 0,
    StyleFlags_GridLines = 1 << 2
}StyleFlags;
typedef enum {
    PinShape_Circle,
    PinShape_CircleFilled,
    PinShape_Triangle,
    PinShape_TriangleFilled,
    PinShape_Quad,
    PinShape_QuadFilled
}PinShape;
typedef enum {
    AttributeFlags_None = 0,
    AttributeFlags_EnableLinkDetachWithDragClick = 1 << 0,
    AttributeFlags_EnableLinkCreationOnSnap = 1 << 1
}AttributeFlags;
struct EmulateThreeButtonMouse
{
        bool enabled;
        const bool* modifier;
};
struct LinkDetachWithModifierClick
{
        const bool* modifier;
};
struct IO
{
    EmulateThreeButtonMouse emulate_three_button_mouse;
    LinkDetachWithModifierClick link_detach_with_modifier_click;
};
struct Style
{
    float grid_spacing;
    float node_corner_rounding;
    float node_padding_horizontal;
    float node_padding_vertical;
    float link_thickness;
    float link_line_segments_per_length;
    float link_hover_distance;
    float pin_circle_radius;
    float pin_quad_side_length;
    float pin_triangle_side_length;
    float pin_line_thickness;
    float pin_hover_radius;
    float pin_offset;
    StyleFlags flags;
    unsigned int colors[ColorStyle_Count];
};
#else
#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef imnodes::EditorContext EditorContext;
typedef imnodes::IO::EmulateThreeButtonMouse EmulateThreeButtonMouse;
typedef imnodes::IO IO;
typedef imnodes::IO::LinkDetachWithModifierClick LinkDetachWithModifierClick;
typedef imnodes::Style Style;
typedef imnodes::AttributeFlags AttributeFlags;
typedef imnodes::ColorStyle ColorStyle;
typedef imnodes::PinShape PinShape;
typedef imnodes::StyleFlags StyleFlags;
typedef imnodes::StyleVar StyleVar;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API EmulateThreeButtonMouse* EmulateThreeButtonMouse_EmulateThreeButtonMouse(void);
CIMGUI_API void EmulateThreeButtonMouse_destroy(EmulateThreeButtonMouse* self);
CIMGUI_API LinkDetachWithModifierClick* LinkDetachWithModifierClick_LinkDetachWithModifierClick(void);
CIMGUI_API void LinkDetachWithModifierClick_destroy(LinkDetachWithModifierClick* self);
CIMGUI_API IO* IO_IO(void);
CIMGUI_API void IO_destroy(IO* self);
CIMGUI_API Style* Style_Style(void);
CIMGUI_API void Style_destroy(Style* self);
CIMGUI_API EditorContext* imnodes_EditorContextCreate(void);
CIMGUI_API void imnodes_EditorContextFree(EditorContext* noname1);
CIMGUI_API void imnodes_EditorContextSet(EditorContext* noname1);
CIMGUI_API void imnodes_EditorContextGetPanning(ImVec2 *pOut);
CIMGUI_API void imnodes_EditorContextResetPanning(const ImVec2 pos);
CIMGUI_API void imnodes_EditorContextMoveToNode(const int node_id);
CIMGUI_API void imnodes_Initialize(void);
CIMGUI_API void imnodes_Shutdown(void);
CIMGUI_API IO* imnodes_GetIO(void);
CIMGUI_API Style* imnodes_GetStyle(void);
CIMGUI_API void imnodes_StyleColorsDark(void);
CIMGUI_API void imnodes_StyleColorsClassic(void);
CIMGUI_API void imnodes_StyleColorsLight(void);
CIMGUI_API void imnodes_BeginNodeEditor(void);
CIMGUI_API void imnodes_EndNodeEditor(void);
CIMGUI_API void imnodes_PushColorStyle(ColorStyle item,unsigned int color);
CIMGUI_API void imnodes_PopColorStyle(void);
CIMGUI_API void imnodes_PushStyleVar(StyleVar style_item,float value);
CIMGUI_API void imnodes_PopStyleVar(void);
CIMGUI_API void imnodes_BeginNode(int id);
CIMGUI_API void imnodes_EndNode(void);
CIMGUI_API void imnodes_GetNodeDimensions(ImVec2 *pOut,int id);
CIMGUI_API void imnodes_BeginNodeTitleBar(void);
CIMGUI_API void imnodes_EndNodeTitleBar(void);
CIMGUI_API void imnodes_BeginInputAttribute(int id,PinShape shape);
CIMGUI_API void imnodes_EndInputAttribute(void);
CIMGUI_API void imnodes_BeginOutputAttribute(int id,PinShape shape);
CIMGUI_API void imnodes_EndOutputAttribute(void);
CIMGUI_API void imnodes_BeginStaticAttribute(int id);
CIMGUI_API void imnodes_EndStaticAttribute(void);
CIMGUI_API void imnodes_PushAttributeFlag(AttributeFlags flag);
CIMGUI_API void imnodes_PopAttributeFlag(void);
CIMGUI_API void imnodes_Link(int id,int start_attribute_id,int end_attribute_id);
CIMGUI_API void imnodes_SetNodeScreenSpacePos(int node_id,const ImVec2 screen_space_pos);
CIMGUI_API void imnodes_SetNodeEditorSpacePos(int node_id,const ImVec2 editor_space_pos);
CIMGUI_API void imnodes_SetNodeGridSpacePos(int node_id,const ImVec2 grid_pos);
CIMGUI_API void imnodes_SetNodeDraggable(int node_id,const bool draggable);
CIMGUI_API void imnodes_GetNodeScreenSpacePos(ImVec2 *pOut,const int node_id);
CIMGUI_API void imnodes_GetNodeEditorSpacePos(ImVec2 *pOut,const int node_id);
CIMGUI_API void imnodes_GetNodeGridSpacePos(ImVec2 *pOut,const int node_id);
CIMGUI_API bool imnodes_IsEditorHovered(void);
CIMGUI_API bool imnodes_IsNodeHovered(int* node_id);
CIMGUI_API bool imnodes_IsLinkHovered(int* link_id);
CIMGUI_API bool imnodes_IsPinHovered(int* attribute_id);
CIMGUI_API int imnodes_NumSelectedNodes(void);
CIMGUI_API int imnodes_NumSelectedLinks(void);
CIMGUI_API void imnodes_GetSelectedNodes(int* node_ids);
CIMGUI_API void imnodes_GetSelectedLinks(int* link_ids);
CIMGUI_API bool imnodes_IsAttributeActive(void);
CIMGUI_API bool imnodes_IsAnyAttributeActive(int* attribute_id);
CIMGUI_API bool imnodes_IsLinkStarted(int* started_at_attribute_id);
CIMGUI_API bool imnodes_IsLinkDropped(int* started_at_attribute_id,bool including_detached_links);
CIMGUI_API bool imnodes_IsLinkCreatedBoolPtr(int* started_at_attribute_id,int* ended_at_attribute_id,bool* created_from_snap);
CIMGUI_API bool imnodes_IsLinkCreatedIntPtr(int* started_at_node_id,int* started_at_attribute_id,int* ended_at_node_id,int* ended_at_attribute_id,bool* created_from_snap);
CIMGUI_API bool imnodes_IsLinkDestroyed(int* link_id);
CIMGUI_API const char* imnodes_SaveCurrentEditorStateToIniString(size_t* data_size);
CIMGUI_API const char* imnodes_SaveEditorStateToIniString(const EditorContext* editor,size_t* data_size);
CIMGUI_API void imnodes_LoadCurrentEditorStateFromIniString(const char* data,size_t data_size);
CIMGUI_API void imnodes_LoadEditorStateFromIniString(EditorContext* editor,const char* data,size_t data_size);
CIMGUI_API void imnodes_SaveCurrentEditorStateToIniFile(const char* file_name);
CIMGUI_API void imnodes_SaveEditorStateToIniFile(const EditorContext* editor,const char* file_name);
CIMGUI_API void imnodes_LoadCurrentEditorStateFromIniFile(const char* file_name);
CIMGUI_API void imnodes_LoadEditorStateFromIniFile(EditorContext* editor,const char* file_name);


//needed for io.link_detach_with_modifier_click.modifier = &ImGui::GetIO().KeyCtrl
CIMGUI_API bool* getIOKeyCtrlPtr();

#endif //CIMNODES_INCLUDED




